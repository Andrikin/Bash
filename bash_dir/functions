#!/usr/bin/env bash
# Estas funções estão restritas ao uso no terminal. Funções aqui descritas não irão funcionar em scripts
# TODO:

psgrep()
{
	ps -aux | grep $1 | grep -v grep
}

nv(){
	nvim "$@"
	clear
}

# Nnn file manager
nnncd(){
	nnn -e "$@"
	if [[ -f $NNN_TMPFILE ]];then
		. "$NNN_TMPFILE"
		rm -f "$NNN_TMPFILE" > /dev/null
	fi
	clear
}

# Lf file manager
lfcd(){
   tmp="$(mktemp)"
   lf -last-dir-path="$tmp" "$@"
   if [ -f "$tmp" ]; then
       dir="$(grep --color=never . "$tmp")"
       rm -f "$tmp"
       if [ -d "$dir" ]; then
           if [ "$dir" != "$(pwd)" ]; then
               cd "$dir"
           fi
       fi
   fi
   clear
}

# Fff file manager
fffcd(){
   fff "$@"
   endereco="$(< "${XDG_CACHE_HOME:=${HOME}/.cache}/fff/.fff_d")"
   if [[ $endereco != $PWD ]];then
       cd "$endereco"
   fi
   clear
}

# Utilizar no lugar de sleep
snore(){
	# Usage: snore 1
    #        snore 0.2
    read -rt "$1" <> <(true) || true
}

# $1=FILE; $2=COMMIT_MESSAGE
git_push_file(){
	git add "$1" && git commit -m "$2" && git push -u origin "$(__git_ps1 '%s')"
}

# [a-z] to [A-Z]
__soft_capslock_on(){
	for n in {97..122}
	do
		hex_c_lower="$(printf '\\x%x' $((n)))"
		hex_c_upper="$(printf '\\x%x' $((n-32)))"
		bind -m vi-insert $"\"$hex_c_lower\": \"$hex_c_upper\""
	done
	SOFT_CAPSLOCK=1
}

__soft_capslock_off(){
	for n in {97..122}
	do
		hex_c_lower="$(printf '\\x%x' $((n)))"
		bind -m vi-insert $"\"$hex_c_lower\": self-insert"
	done
	SOFT_CAPSLOCK=0
}

# Bind: bind -m vi-insert $'"\xhh": "\xhh"'
# Revert bind with: bind -m vi-insert '"\xhh": self-insert'
__soft_capslock_toggle(){
	if (( !$SOFT_CAPSLOCK ))
	then
		__soft_capslock_on
	else
		__soft_capslock_off
	fi
}

__capslock_statusline(){
	local caps=''
	if (( $SOFT_CAPSLOCK ))
	then
		caps='[CAPS]'
	fi
	printf "$caps"
}

__reset_soft_capslock(){
	# Reset soft capslock
	if (( $SOFT_CAPSLOCK ))
	then
		__soft_capslock_off
	fi
}

# Complete quote
__readline_insert_pair(){
	READLINE_LINE="${READLINE_LINE:0:$READLINE_POINT}${1}${READLINE_LINE:$READLINE_POINT}"
	# Get cursor on right place
	(( READLINE_POINT+=1 ))
}

__prompt_command(){
	# \u - user, \w - diretório
	# Sempre lembrar de envolver comandos não printáveis com "\[\]"
	# Cores
	local CAPS_INFO=$(__capslock_statusline)
	local B_GRAY='\[\e[48;5;239m\]'
	local F_GRAY='\[\e[38;5;239m\]'
	local B_WHITE='\[\e[107m\]'
	local F_WHITE='\[\e[39m\]'
	local F_RED='\[\e[31m\]'
	local BOLD='\[\e[1m\]'
	local RESET='\[\e[0m\]'
	local RESET_LINE='\[\e[2K\]'
	PS1="${RESET}${BOLD}${B_GRAY} Andre ${CAPS_INFO}${F_GRAY}${B_WHITE}${RESET}${BOLD}${F_GRAY}${B_WHITE} \W${F_RED}\$(__git_ps1 ' [%s]')${RESET}${F_WHITE}${RESET}"
	__reset_soft_capslock
}

# -m mode; -x shell-functions
# Command Mode
bind -m vi-command -x '"\C-k": nnncd'

# Insert Mode
bind -m vi-insert -x '"\C-k": nnncd'
bind -m vi-insert -x '"\C-l": __soft_capslock_toggle'
bind -m vi-insert -x $'"\x27\x27": __readline_insert_pair \\\x27\\\x27' # single quote
bind -m vi-insert -x $'"\\\x22\\\x22": __readline_insert_pair \\\x22\\\x22' # double quote

#tabbed_st(){
#	TABBED_GUIA="$HOME/.local/share/tabbed_guia.num"
#	tabbed -c -r 2 st -w '' -T "Guia $(($(< $TABBED_GUIA)++))"
#}
